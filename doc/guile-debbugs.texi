\input texinfo
@c -*-texinfo-*-

@c %**start of header
@setfilename guile-debbugs.info
@documentencoding UTF-8
@settitle Guile Debbugs Reference Manual
@c %**end of header

@include version.texi

@copying
Copyright @copyright{} 2017 Ricardo Wurmus@*

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end copying

@dircategory The Algorithmic Language Scheme
@direntry
* Guile-Debbugs: (guile-debbugs).      Guile bindings to Debbugs.
@end direntry

@titlepage
@title Guile Debbugs Reference Manual
@subtitle Accessing the Debbugs bug tracker with Guile
@author Ricardo Wurmus

@page
@vskip 0pt plus 1filll
Edition @value{EDITION} @*
@value{UPDATED} @*

@insertcopying
@end titlepage

@contents

@c *********************************************************************
@node Top
@top Guile Debbugs

This document describes Guile Debbugs version @value{VERSION}, the Guile
bindings for the Debbugs bug tracker's SOAP service.

@menu
* Introduction::                What is this all about?
* Installation::                Installing Guile-Debbugs.
* Programming Interface::       Using Guile-Debbugs in Scheme.

* Acknowledgments::             Thanks!
* GNU Free Documentation License::  The license of this manual.
* Concept Index::               Concepts.
* Programming Index::           Data types, functions, and variables.
@end menu

@c *********************************************************************
@node Introduction
@chapter Introduction

This package provides a Guile library to communicate with a Debbugs bug
tracker's SOAP service.

Here is a short Guile REPL session demonstrating some of the things you
can do with this library:

@cindex example, REPL session
@lisp
(set! %load-path (cons "/path/to/guile-debbugs/" %load-path))
,use (debbugs soap)
,use (debbugs operations)
,use (debbugs bugs)
,use (debbugs email)
(define %debian "http://bugs.debian.org/cgi-bin/soap.cgi")
(define %gnu "https://debbugs.gnu.org/cgi/soap.cgi")
(soap-invoke %debian newest-bugs 3)
$1 = (880882 880881 880880)
(soap-invoke %debian get-status $1)
$2 = (#<bug 880882 ...> #<bug 880881 ...> #<bug 880880 ...>)
(map bug-originator $2)
$3 = ("ringo" "paul" "george")
(soap-invoke %debian get-bug-log (car $1))
$4 = (#<email 1 ...> #<email 2 ...> #<email 3 ...>)
(email-body (car $4))
$5 = "Hello world! ..."
@end lisp

For documentation of the supported operations @xref{Operations}.


@c *********************************************************************
@node Installation
@chapter Installation

Guile Debbugs uses the GNU build system.  To install Guile Debbugs from
a release tarball just unpack it and run the usual commands:

@example
./configure
make
make install
@end example

If you want to build the sources from the source repository you need to
bootstrap the build system first.  Run the @code{bootstrap.sh} script
first and then perform the above steps.

@c *********************************************************************
@node Programming Interface
@chapter Programming Interface

Guile Debbugs provides rudimentary procedures to make requests to a SOAP
service, and it defines operations that can be invoked on it.  It does
not provide a full implementation of SOAP and it has only been tested
with Debbugs.

The following modules are included:

@table @code
@item (debbugs base64)
Procedures for decoding and encoding base64 strings.

@item (debbugs bug)
Procedures to parse bugs as returned by Debbugs, and to access their
properties.

@item (debbugs email)
Procedures to parse emails as returned by Debbugs.

@item (debbugs operations)
Implementations of SOAP operations supported by Debbugs.

@item (debbugs rfc822)
Parser for email headers.

@item (debbugs soap)
Procedures for talking with SOAP services.
@end table

The modules @code{(debbugs rfc822)} and @code{(debbugs base64)} won't be
documented here as they are primarily for internal use.

@menu
* SOAP helpers::           Procedures for talking with SOAP services.
* Operations::             Debbugs SOAP operations.
* Bug helpers::            Procedures for parsing bugs and accessing their properties.
* Email helpers::          Procedures for parsing emails and accessing their properties.
@end menu

@c *********************************************************************
@node SOAP helpers
@section SOAP helpers

@cindex (debbugs soap), module
The module @code{(debbugs soap)} provides procedures to invoke
operations on a SOAP service, to retrieve responses, and to convert
those responses to Scheme values.

@cindex soap-request, constructor
@deffn {Scheme Procedure} soap-request @var{body} [@var{callback}]
Return a @code{<soap-request>}, which combines a SOAP request envelope
enclosing the SXML expression @var{body} and the single-argument
response handler procedure @var{callback}.  The response handler is to
be called on the SOAP response SXML.  When no handler is provided the
response expression is not processed.
@end deffn

@cindex soap-request?, predicate
@deffn {Scheme Procedure} soap-request? @var{record}
Return @code{#t} when @var{record} is a @code{<soap-request>} object.
@end deffn

@cindex soap-request-body, accessor
@deffn {Scheme Procedure} soap-request-body @var{request}
Return the SXML @code{body} of the SOAP request @var{request}, a
@code{<soap-request>} object.
@end deffn

@cindex soap-request-callback, accessor
@deffn {Scheme Procedure} soap-request-callback @var{request}
Return the response handler procedure @code{callback} of the SOAP
request @var{request}, a @code{<soap-request>} object.
@end deffn

@cindex make a SOAP request
@cindex invoke SOAP operation
@cindex send a request to a SOAP service
@cindex soap-invoke, procedure
@deffn {Scheme Procedure} soap-invoke @var{uri} @var{op} [@var{args} @dots{}]
Invoke the SOAP operation @var{op}, a @code{<soap-request>} object, with
all provided arguments @var{args} on the SOAP service at the provided
URI @var{uri}.  Return the response body after processing it with the
handler procedure that is part of @var{op}.
@end deffn

@cindex convert XML response to Scheme
@cindex soap->scheme, procedure
@deffn {Scheme Procedure} soap->scheme @var{sxml} [@var{plain}]
Recursively convert a SOAP SXML expression @var{sxml} for a named value
to a Scheme value.  If @var{plain} is @var{#t} return only the value,
otherwise return a pair of a name and the value.
@end deffn

@c *********************************************************************
@node Operations
@section Operations

@cindex (debbugs operations), module
This module implements SOAP operations that can be used with a Debbugs
SOAP service.  Each of the procedures in this module returns a
@code{<soap-request>} value, i.e. a message in SXML format and an
optional response handler procedure.

@cindex newest-bugs, operation
@deffn {Scheme Procedure} newest-bugs @var{amount}
This operation returns the identifiers of the newest bugs as a list of
numbers.  The integer @var{amount} must be specified to limit the number
of bugs returned by Debbugs.
@end deffn

@cindex get-status, operation
@deffn {Scheme Procedure} get-status @var{bug-ids}
This operation returns @code{<bug>} records containing the details for
the bugs identified by @var{bug-ids}, a list of bug numbers.  @xref{Bug
helpers} for procedures that can be used on the return values.
@end deffn

@cindex get-bugs, operation
@deffn {Scheme Procedure} get-bugs @var{args}
This operation returns bug numbers for bugs that match the conditions
given by @var{args}, an alist of key-value pairs.  Possible keys are
@code{package}, @code{submitter}, @code{maint}, @code{src},
@code{severity}, @code{status}, @code{tag}, @code{owner}, @code{bugs},
@code{affects}, and @code{archive}.

All keys and values must be provided as strings.  Valid values for
@code{status} are the strings @code{done}, @code{forwarded}, and
@code{open}.  For @code{archive} the valid values are either the string
@code{both}, the string @code{1} (meaning ``archived''), or the string
@code{0} (meaning ``not archived'').
@end deffn

@cindex get-bug-log, operation
@deffn {Scheme Procedure} get-bug-log @var{bug-id}
This operation requests all emails associated with the bug identified by
@var{bug-id}.  All emails are returned as @code{<email>} values.
@xref{Email helpers} for procedures that can be used on the return
values.
@end deffn

@cindex get-usertag, operation
@deffn {Scheme Procedure} get-usertag @var{email}
This operation returns an association list of tag names (as strings) to
lists of bug numbers for all bugs that have been tagged by @var{email},
a string holding an email address.
@end deffn

@c *********************************************************************
@node Bug helpers
@section Bug helpers

@cindex (debbugs bug), module
TODO

@c *********************************************************************
@node Email helpers
@section Email helpers

@cindex (debbugs email), module
TODO

@c *********************************************************************
@node Acknowledgments
@chapter Acknowledgments

Thanks to the following people who contributed to Guile-Debbugs through
bug reports or patches:

@itemize @bullet
@item Your Name Here @email{nobody@@yet}
@end itemize


Thank you.

@c *********************************************************************
@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl-1.3.texi

@page

@c *********************************************************************
@node Concept Index
@unnumbered Concept Index

@printindex cp

@node Programming Index
@unnumbered Programming Index
@syncodeindex tp fn
@syncodeindex vr fn
@printindex fn

@bye
